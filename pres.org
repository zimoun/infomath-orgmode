# mode: org ; coding: utf-8
#+STARTUP: content indent hideblocks
#+TAGS:    config(c) LIVE(l) noexport(n)

#+REVEAL_THEME: sky
#+REVEAL_ROOT:        https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_HLEVEL:      2
# #+REVEAL: split


#+TITLE: M-x org-mode
#+AUTHOR: simon
#+DATE:   Jan. 24, 2019
#+EMAIL:  simon.tournier@univ-paris-diderot.fr

#+OPTIONS: toc:nil
#+OPTIONS: author:t date:t email:nil
#+OPTIONS: reveal_slide_number:nil num:nil

* README                                                           :noexport:
** Hack to tell you to read the next subsections :-)

Go to the next subsection about General conventions.

# :exports none should be removed since the section is :noexports:
#+begin_src org :tangle README.org :exports none


  [[https://zimoun.github.com/infomath-orgmode/pres.html][The presentation is served there.]]

  --


  Open the file =pres.org= with Emacs:

   1) Copy the proposed =init.el= file in the hidden directory =$HOME/.emacs.d/=
   2) Start Emacs (click somewhere depending on your OS/distribution)
   3) Go to /File->Visit File/ and reach =pres.org=
   4) Move the cursor down with the Arrow
   5) In front of the section README, press TAB
   6) The section is expanded
   7) Move down in front of #+begin_src, press TAB
   8) The block is expanded
   9) Press TAB again, the block is collapsed
   10) Move the cursor to the header of a subsection
   11) Press TAB, the subsection is expanded
   12) Press TAB again, the subsection is collasped
   13) Cycle with Shift+TAB
   14) Read, Try, Fail, Try again, and be patient :-)

  The presentation and =pres.org= are an pedestrian attempt of an Org-mode and
  Emacs's discovery. So please email me or open an issue.


  The presentation is served [[https://zimoun.github.com/infomath-orgmode/pres.html][there]].

  ,*Note* that some images point to non-secure =http= (i.e., not
  =https=). Maybe, your web-browser needs to allow non-secure connections
  (see address bar, lock icons, turn on/off) to display the presentaion.


  --


  Email me or open an issue if something does not work.
#+end_src

** General conventions

Emacs heavily uses the Control key and the Alt key. The shortcuts are
combinations of press Control or Alt and in the same time press other keys.

*** How to use Control key: example

For example, the shortcut to go at the beginning of the current line
is press Control and continuing to press Control you also press a.
Move with the arrows the cursor here. Try!

For example, the shortcut to quit Emacs is press Control and
continuing to press Control you press x, then you again press Control
and continuing to press Control you also press c. Try... bye. :-)

*** Convention about Control key

The convention to document these shortcuts is:

- C-a which means press Control and a in the same time.
- C-x C-c which press Control and x in the same time, then Control and c
  again in the same time.

*** How to use Alt key: example

It is exactly the same principle for Alt.

For example, the shortcut to move backward a word is press Alt and
continuing to press Alt you also press b.

For example, press Alt and continuing to press Alt you also press
x. Then type beginning-of-line, following by Enter. Magic, isn't? :-)

*** Convention about Alt key

The convention used elsewhere is:

- M-b which means press Alt and b in the same time
- M-x beginning-of-line which means press Alt and x in the same time,
  then type beginning-of-line, followed by Enter.

The letter M comes from Meta, the old name on old keyboards.

*Note:* that you can also use Esc as Meta key. In other words, the shortcut
M-b means: press Alt and b _or_ press Esc and b.

** Export all the files used to show off

To ease the first experience, all the files are included in the
repository. However, all these files are generated by this document.
They are described by the blocks #+begin_src ... #+end_src.

If you want to generate them, you will use org-babel. It is as simply as
the sequence: Control c Control v t or in short C-c C-v t.

** Export the presentation: Org->HTML with Reveal.js

The external package ox-reveal is not recently updated.

1. Therefore, it does not work with the version 9.2 of Org-mode.
   See the issue 324: [[https://github.com/yjwen/org-reveal/issues/324][https://github.com/yjwen/org-reveal/issues/324]]
2. However, it does not work neither with the version 8.2 (included in Emacs 24)

Here a workaround.

*** Check your version of Emacs

Check your version of Emacs, choose a method:
1. Open Emacs, then press Alt and x and type version
   In short: M-x version
   (see above about the General conventions)
2. Open a Terminal, then type: emacs -version

*** Check your version of Org-mode

Choose a method:
1. Open Emacs, then press Alt and x and type org-version
   In short: M-x org-version
   (see above about the General conventions)
2. Open a Terminal, then type: emacs -batch -f org-version

*** Clone my org+reveal repository

1. Open a Terminal
2. Create the right folders, by typing
   mkdir -p ~/.emacs.d/elpa
3. Clone the repo by typing
   git clone https://github.com/zimoun/org-reveal.git ~/.emacs.d/elpa/org-reveal.git

If you use Windows, then please consider using Linux (or at least MacOS).

*** Add init.el to your Emacs directory ~/.emacs.d/                :config:

#+NAME: org-and-reveal
#+begin_src elisp

  ;;;;
  ;;
  ;; Set Org
  ;;
  ;; General config about Org
  (use-package org
    :ensure org-plus-contrib		; tricks!
                                          ; ensure the last version of Org

    :defer t
    :bind ("\C-ca"  . org-agenda)

    :config
    ;; With 9.2 <s does not work anymore
    ;; The Org Tempo should allow the previous mechanism
    ;; but does not work
    (require 'org-tempo)
    ;; else see org-structure-template-alist

    ;; directories containing the Org files used by the org-agenda
    ;; search all files with the extension .org in the directory "~/org/"
    (setq org-agenda-files (directory-files-recursively "~/org/" "\.org$"))

    (setq org-hide-emphasis-markers t)	; hide markups

    ;; hook to limit the number of characters per line
    ;; this number is controled by the variable fill-column
    (add-hook 'org-mode-hook 'turn-on-auto-fill)

    (setq org-src-fontify-natively t)	; coloring   inside blocks
    (setq org-src-tab-acts-natively t)	; completion inside blocks
    (setq org-tag-faces			; color is nicer ;-)
          '(
            ("config" . (:foreground "mediumseagreen" :weight bold))
            ("LIVE" . (:foreground "Red" :underline t))

            ("@meet" . (:foreground "mediumseagreen" :weight bold :underline t))
            ("URGENT" . (:foreground "Red" :underline t))
            ))

    ;; execute blocks (can be reused if even you do not use Reveal.js)
    (org-babel-do-load-languages
     'org-babel-load-languages '((python . t)
                                 (R . t)
                                 (shell . t)))
    ;; do not ask before eval code blocks
    (setq org-confirm-babel-evaluate nil)

    ;; store time when TODO is DONE
    (setq org-log-done (quote time)))


  ;;;;
  ;;
  ;; Set Reveal.js
  ;;
  ;;
  ;; WARNING: issue with Org 8.2
  ;; Not sure this code fixed the issue
  ;;
  ;; The idea is:
  ;; 1. Trick from https://github.com/jwiegley/use-package/issues/319
  ;;    Download the newer version of Org by ensuring org-plus-contrib
  ;; 2. DO NOT FORGET to manually clone org-reveal from Github
  ;;    Put it somewhere and give this inforamtion to :load-path
  ;;
  ;;    WARNING: org-reveal does not work with Org 9.2
  ;;    Fork: https://github.com/zimoun/org-reveal.git
  ;;          and this fork comments the inconsistency
  ;;
  ;; 3. Done.
  ;;
  (setq ox-reveal-path "~/.emacs.d/elpa/org-reveal.git")
  (if (file-directory-p ox-reveal-path)
      ;; then-clause
      (use-package ox-reveal
        :load-path ox-reveal-path
        :init
        ;; always load ox-reveal at startup
        ;; comment this line if you want not
        ;; but do not forget to load it manually M-: (require 'ox-reveal)
        (require 'ox-reveal))
    ;; else-clause
    (warn
     (format "Cannot load org exporter to Reveal.js.\nFix two steps: 1) Clone and 2) Reload.\n\ngit clone https://github.com/zimoun/org-reveal.git %s\n\nM-x load-file \"~/.emacs.d/init.el\"" ox-reveal-path)))

  ;;
  ;; ;end Reveal.js
  ;;
  ;;;;

  ;;;;
  ;;
  ;; Set syntax coloring
  ;;
  (use-package htmlize
    :ensure t
    :defer t)

  ;;
  ;; ;end
  ;;
  ;;;;
#+end_src

*** Load manually the Org-mode module of Reveal.js

1. Start Emacs
   If you use the init.el file, then the exporter is already loaded.
   Else go to 2.

2. Press Alt :
   In short: M-:

3. Type (require 'ox-reveal)

(see above about the General conventions)
*** Export as any exporter

1. Press Control c then Control e
2. Press Shift R Shift R (twice)

In short: C-c C-e R R
(see above about the General conventions)

** Script to copy config                                            :config:

#+begin_src shell :tangle config-me.sh
  mkdir -p ~/.emacs.d/snippets
  cp init.el ~/.emacs.d/
  cp -R eg/snippets/* ~/.emacs.d/snippets/
#+end_src

#+begin_src text :tangle (prog1 "~/org/README" (make-directory "~/org/" "."))
  This directory contains all the Org files used by org-agenda.
  See the Org-mode manual.
#+end_src

* From where I talk ?

*** Who I am ?

 - Mainly a geek guy
 - Research Engineer at Univ. Paris 7 Diderot
 -
   + Post-Doc Católica (Chile)
   + Post-Doc Univ. Liège (/hi Berty!/)
   + PhD at ONERA Toulouse

#+begin_quote
=simon.tournier@univ-paris-diderot.fr=

[[https://github.com/zimoun][https://github.com/zimoun]]
#+end_quote

*** My life

 - 2006-2010: Vim user... and happy!
 - 2011 New Year Resolutions: [[https://www.youtube.com/watch?v=JWD1Fpdd4Pc][Switch]] to [[https://upsilon.cc/~zack/blog/posts/2008/11/from_Vim_to_Emacs_-_part_2/][Emacs]] (video)
 - 2016: New Job with heavy context switch

Not able to *Getting Things Done*.

$\Rightarrow$ [[https://robots.thoughtbot.com/the-many-uses-of-org-mode][Switch to Org-mode]]


#+begin_quote
I am only an enthusiast user, not a guru
#+end_quote

*** My typical use-cases

 - Organize my tasks and log them
 - Write _/docs/_ for myself
 - Produce computational notebooks


# Create the folder named 'eg/elisp' from the current folder '.'
# Then tangle/export inside
#+NAME: ask-at-point
#+begin_src elisp :tangle (prog1 "eg/elisp/some-code.el" (make-directory "eg/elisp" "."))
  (defun ask-at-point (&optional i-know)
    "Feel free to ask everything."
    (interactive "P")
    (if i-know (message "Quick Answer.")
     (browse-url
      (concat "https://www.ddg.gg/?q=org-mode+"
              (thing-at-point 'symbol)))))
#+end_src

* What Org-mode is?

1. A major mode of Emacs
2. *Markup language*, help for:
   - keeping notes
   - maintenaing TODO lists
   - planning projects
   - authoring documents
   - table editor
3. Killer feature of Emacs ;-)

# * Contents

#  1. Quick Intro to Emacs + Org Configuration
#  2. Markup facilities
#  3. TODO and planning
#  4. Table editor
#  5. Interactive computational documents

* What Emacs is ?

*** The [[https://www.youtube.com/watch?v=RtvlBS4PMF0][Power to the people]] :-)

#+ATTR_HTML: :width 50%
https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Unico_Anello.png/220px-Unico_Anello.png

*** Explanations in previous info-math

[[https://zimoun.github.io/infomath-emacs/pres.html][https://zimoun.github.io/infomath-emacs/pres.html]]

(ok let quick recap in 3 slides)

*** Definition

Emacs is a *User Interface* (UI) to manipulate text

 - Decent [[https://www.gnu.org/software/emacs/][editor]]
 - IDE for a lot of languages ([[http://cedet.sourceforge.net][CEDET]], [[https://common-lisp.net/project/slime/][SLIME]], [[http://www.nongnu.org/geiser/][Geiser]], [[https://tkf.github.io/emacs-ipython-notebook/][EIN]])
 - [[https://notmuchmail.org/notmuch-emacs/][Mail Reader]], [[https://www.gnu.org/software/emacs/manual/html_node/gnus/][Mail Reader]], [[https://github.com/skeeto/elfeed][RSS Reader]], etc.
 - [[https://en.wikipedia.org/wiki/Lisp_machine][Extensible Lisp machine]]?
 - [[https://github.com/ch11ng/exwm][Windows Manager]]?
 - [[http://doc.rix.si/cce/cce.html][OS]]? :-)

*** Theorem / Corollary / Example

#+begin_quote
All what X is able, Emacs does it too.
#+end_quote

#+ATTR_HTML: :width 50%
[[https://i.redd.it/l58yl5wh6fk11.png]]

#+begin_quote
*Advice*: give a try to the tutorial of Emacs: =C-h t=
#+end_quote

*** Alternative Reality

- [[http://batsov.com/prelude/][Emacs Prelude]]
- [[http://spacemacs.org][Spacemacs]]
- [[http://ergoemacs.github.io][ErgoEmacs]]
- [[http://emacs-bootstrap.com/][Emacs Bootstrap]]
- [[https://www.gnu.org/software/emacs/manual/html_mono/viper.html][Viper]] $\longrightarrow$ [[https://github.com/emacs-evil/evil][Evil]]
- [[https://github.com/technomancy/emacs-starter-kit][Starter Kit]]
- [[https://github.com/jkitchin/scimax][Scimax]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA-mode]]


*** Configuration                                         :config:noexport:
**** Misc

#+NAME: initial-message
#+begin_src elisp :tangle init.el
  ;; remove the initial starting message
  (setq inhibit-startup-message t)

  ;; delete the *scratch* initial message
  (setq initial-scratch-message nil)
#+end_src

#+NAME: menu-bar
#+begin_src elisp :tangle init.el
  ;; remove the menu when inside terminal
  (if (display-graphic-p)
      (menu-bar-mode 1)
    (menu-bar-mode 0))
#+end_src

#+NAME: defalias
#+begin_src elisp :tangle init.el
  ;; simplify the question-answer process
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; M-x mode-* instead of the long name
  (defalias 'mode-whitespace 'whitespace-mode)
  (defalias 'mode-highlight 'global-hl-line-mode)
#+end_src

#+NAME: global-set-key
#+begin_src elisp :tangle init.el
  ;; set global shortcuts
  (global-set-key [?\C-k] 'kill-whole-line)
  (global-set-key [?\C-$] 'ispell-region)
#+end_src

#+NAME: hook
#+begin_src elisp :tangle init.el
;; delete dirty spaces
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

#+NAME: various-useful
#+begin_src elisp :tangle init.el :exports none
  ;; highlight the selected area
  (setq transient-mark-mode t)
  ;; change the default color of the selected area
  (set-face-attribute 'region nil :background "yellow")

  ;; manipulate more easily Buffers
  (ido-mode 'buffers)

  ;; instead of filename.extension~ in the working directory
  ;; all the backup files (suffix ~) are stored there
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )

  ;; set the maximum character per line
  ;;  used by minor mode  (fill-mode)
  (setq-default fill-column 80)

  ;; display the number of the column
  (column-number-mode t)

  ;; save minibuffer history
  (savehist-mode 1)

  ;; the nice buffers manager
  (require 'ibuffer)
  ;; change the default one to ibuffer
  (defalias 'list-buffers 'ibuffer)
  ;; group buffers
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Dired" (mode . dired-mode))
                 ("(La)TeX" (or
                             (mode . tex-mode)
                             (mode . latex-mode)
                             ))
                 ("Lisp" (or
                          (mode . lisp-mode)
                          (mode . emacs-lisp-mode)
                          (mode . scheme-mode)
                          ))
                 ("MaGit" (name . "\*magit"))
                 ("Org" (mode . org-mode))
                 ("Py" (mode . python-mode))
                 ("emacs" (or
                           (name . "^\\*[a-zA-Z ]*\\*$")))))))
  ;; setup the groups
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (setq-local case-fold-search nil)
              (ibuffer-switch-to-saved-filter-groups "default")))
  ;; sort buffer in each group in alphabetic order
  (setq ibuffer-default-sorting-mode 'alphabetic)


  ;; change theme (I personally use the default one)
  ;; (load-theme 'leuven)
  ;; or download one from the web
  ;; (use-package zenburn
  ;;   :ensure t
  ;;   :init
  ;;   (load-theme 'zenburn))
#+end_src
**** Packages

#+NAME: use-package
#+begin_src elisp :tangle init.el
  ;; boostrap `use-package' by John Wiegley
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  ;; load it
  (require 'use-package)
#+end_src

***** dired

#+NAME: dired
#+begin_src elisp :tangle init.el
  ;; change the default file manager
  (use-package dired
    :defer t
    :init
    (defalias 'list-directory 'dired)
    :config
    (define-key dired-mode-map (kbd "E") 'dired-toggle-read-only))
#+end_src

***** julia

# #+NAME: ess-julia
# #+begin_src elisp :tangle init.el
  ;; example of Julia configuration
  (use-package ess
    :ensure t
    :defer t
    ;; :init	                            ; example with non-standard loc.
    ;; (setq inferior-julia-program
    ;; 	"/Applications/Julia-0.6.app/Contents/Resources/julia/bin/julia")
    :mode (("\\.jl\\'" . ess-julia-mode))
    :defines ess-indent-offset            ; silent warning
    :config
    (require 'ess-julia)
    (require 'ess-utils)
    (setq ess-eval-visibly-p nil)
    (setq ess-use-eldoc'script-only))
#+end_src

***** command-log

#+NAME: command-log
#+begin_src elisp :exports none

  ;;
  ;;
  ;;

  ;; useful to demo (log all the keystrokes)
  (use-package command-log-mode
    :ensure t
    :defer t
    :init
    ;; comment the line to not load globally command-log-mode
    (setq command-log-mode-is-global t)   ; turn off by replacing t with nil

    (defalias 'mode-command-log 'command-log-mode)
    (defalias 'command-log-show '(lambda (&optional arg)
                                   (interactive "P")
                                   (progn
                                     (command-log-mode)
                                     (message "Alias of clm/open-command-log-buffer. See M-x clm/TAB.")
                                     (clm/open-command-log-buffer arg))))
    (add-hook 'LaTeX-mode-hook 'command-log-mode)
    (add-hook 'python-mode-hook 'command-log-mode)
    (add-hook 'org-mode-hook 'command-log-mode)
    (add-hook 'emacs-lisp-mode-hook 'command-log-mode)
    (add-hook 'text-mode-hook 'command-log-mode))

  ;; ;; to change highlight of the selection
  ;; (set-face-attribute 'region nil :background "#ffff00")

  ;; ;; to change the background, sometimes eyes are really tired
  ;; (set-background-color "LightGoldenrod3")
  ;; ;;(set-background-color "LightCyan3")
#+end_src

***** latex

#+NAME: config-latex
#+begin_src elisp
  ;;;;
  ;;
  ;; TeX/LaTeX configuration
  ;;
  ;; be careful, the names of the modes are a bit a messy
  (use-package tex-mode
    :defer t
    :config
    ;; automatically bound paragraph length
    (add-hook 'latex-mode-hook 'turn-on-auto-fill)
    ;; turn on the nice RefTeX package
    (add-hook 'latex-mode-hook 'turn-on-reftex))

  ;; compilation show first the first error
  ;; instead of the end of the compilation buffer
  (setq compilation-scroll-output 'first-error)

  ;; mispelling correction using dictionary
  (use-package ispell
    :defer t
    :config
    ;; you need to install the program aspell
    (setq-default ispell-program-name "aspell"))
  #+end_src

***** last


#+NAME: last
#+begin_src elisp :noweb yes :tangle init.el :exports none

  ;;;;
  ;;
  ;; Move automatic custom to special file
  ;;;; avoid to pollute this file
  ;;;; and custom.el is not versionned
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load-file custom-file))
  ;;
  ;;;;

  <<config-latex>>

  <<config-python>>

  <<config-lisp>>

  <<ediff>>

  <<magit>>


  <<org-and-reveal>>

  ;;;;
  ;;
  ;; Below is not minimal
  ;;
  ;;

  <<command-log>>
#+end_src

* How to configure

The Org-mode configuration is driven by
#+begin_quote
=$HOME/.emacs.d/init.el=
#+end_quote

#+NAME: initial-comment
#+begin_src elisp :tangle init.el :exports none

;;;;
;;
;; Basics example of configuration file
;;
;; mkdir -p $HOME/.emacs.d
;; mv init.el $HOME/.emacs.d/init.el
;;
;;;;

#+end_src

*** Configure what?

#+begin_quote
Nothing to do!
#+end_quote

*Org-mode is included in all recent Emacs*

(since GNU Emacs 22 released in 2006)

*** But...

Specific features are in contrib

#+NAME: require-package
#+begin_src elisp :tangle init.el
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               ;; `use-package' is not in ELPA, as many more ;-)
               '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives
                 ;; Add org-plus-contrib
                 '("org" . "http://orgmode.org/elpa/"))
  (package-initialize)
#+end_src
#+begin_quote
=M-x package-list-packages=
#+end_quote




* Let's talk about Unicorn

#+ATTR_HTML: :width 60%
https://lists.gnu.org/archive/html/emacs-orgmode/2009-06/jpgOOYZDKoq6T.jpg

* [[https://orgmode.org][org-mode]] is...

# John Kitchin: Scimax and Python dev. Book
#+begin_quote
"[[https://www.youtube.com/watch?v=fgizHHd7nOo][Awesome!]]" -- [[https://github.com/jkitchin/dft-book][John Kitchin]] (video)
#+end_quote

- [[https://orgmode.org/worg/org-tutorials/org4beginners.html][Org for beginners]]
- [[http://pragmaticemacs.com/org-mode-tutorials/][A tutorial/blog]]
- [[https://orgmode.org/worg/org-tutorials/org-screencasts/org-mode-google-tech-talk.html#sec-2][Google Tech Talk]] by Carsten Dominik (video)
- [[https://www.jstatsoft.org/article/view/v046i03][Original Paper]] (2012)
- [[https://youtube.com/watch?v=SzA2YODtgK4][Getting Started with Org-mode]] by New-York Emacs meetup (video)
- [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][An implementation: Org-mode + GTD]]
- [[https://blog.fugue.co/2015-11-11-guide-to-emacs.html][CEO]] explains his [[https://blog.fugue.co/2015-11-11-guide-to-emacs.html][experience]]


*** Org is vast...

... *start small!*

#+begin_quote
"Don't try to set up the 'final' task managing system from the
start.  Because you have no idea yet what your system should look
like.
[...]
Start by creating and managing a small TODO list and
then develop your own system as the needs arises." -- [[http://lists.gnu.org/archive/html/emacs-orgmode/2008-04/msg00009.html][Carsten Dominik]]
(creator of org)
#+end_quote

*** [[http://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs/][Where/How to start]]

#+ATTR_HTML: :width 60%
http://sachachua.com/blog/wp-content/uploads/2014/01/2014-01-07-Map-for-learning-Org-Mode-for-Emacs-640x480.png

[[https://orgmode.org/orgcard.pdf][https://orgmode.org/orgcard.pdf]]

*** My experience

- Learn a couple of its capabilities
- Integrate them into your workflow
- You’ll find yourself thinking, "Hum?, it would be nice if I
  could X"
- Then browse the manual [[https://www.gnu.org/software/emacs/manual/html_node/org/][(=C-h i m org=)]]

... and, in fact, Org can do X

* Show me the Unicorn!!

#+ATTR_HTML: :width 60%
https://lists.gnu.org/archive/html/emacs-orgmode/2009-06/jpgOOYZDKoq6T.jpg

* Markup languages
*** Basics

- _underline_
- *bold*
- /italic/
- =verbatim=
- ~code~
- +strike+
- list
- section, [[https://orgmode.org/][link]], etc.

*** Raw

#+begin_src text
  ,* Level 1
  ,** Level 2
  ,*** Level 3
  ,**** Level 4

     + _underline_
     + *bold*
     + /italic/

  ,*** Other 3

     1) =verbatim=
     2) ~code~
     3) +strike+

  ,** More 2

     - list
     - section, [[https://orgmode.org/][link]], etc.
#+end_src

*** Facilities to write

- =M-Enter= creates new item
- =M-Left/Right= changes the level
- =M-Up/Dow= moves the item up/down
- =C-c C-n= move next header (=C-p= previous)
- =C-c C-u= move upper header (level 2->level 1)
- =S-Left/Right= change list item kind (=C-c -=)
- =S-TAB= cycles the visibility

Emacs power! ;-)

*** Equation (raw)

#+begin_src org
  Let only consider $\pi^2$ or $\Pi_\infty$, considering
  $$\cos(x) = \textrm{real}~ \sum_n \frac{ix}{n!}$$

  \begin{array}{ccl}
  u^{\prime\prime} + k^2 u &=& 0 \\
  & \textrm{with} &
  u(0) = 1 \\
  & \textrm{and} &
  u^\prime(1)=iku(1)
  \end{array}
#+end_src

$\LaTeX$ support

*** The equations exported

Let only consider $\pi^2$ or $\Pi_\infty$, considering
$$\cos(x) = \textrm{real}~ \sum_n \frac{ix}{n!}$$

  \begin{array}{ccl}
  u^{\prime\prime} + k^2 u &=& 0 \\
  & \textrm{with} &
  u(0) = 1 \\
  & \textrm{and} &
  u^\prime(1)=iku(1)
  \end{array}

*** Exported?

Yes!

from =.org= to HTML or PDF (or =.tex=) or ... Reveal.js etc.

---

=C-c C-e= opens the menu of exporters

*** More list: checkbox

#+begin_src org
  ,* Stuff [2/4]

  - [X] Read the Dautray-Lions
  - [-] Write summary [75%]
    + [X] Tome 1
    + [X] Tome 2
    + [X] Tome 3
    + [ ] Les autres
  - [ ] Present Chapter 2 in Seminar
  - [X] Drink coffee
#+end_src

- Validate: =C-c C-c= on the item
- Automatic update

* Wait!

Is not also a planner?

#+ATTR_HTML: :width 20%
https://i5.walmartimages.com/asr/34909043-4ebd-4043-a6d5-c31b2f6cbbf4_1.8e2dea8a0fc20d8775352b09caca44ff.jpeg

*** Plan: TODO DONE (NEXT WAIT CANCELED) etc.

#+begin_src org :tangle "~/org/todo-example.org"
  ,* TODO Presentation [1/4]
  ,** TODO Collect ressources [50%]
  ,*** DONE Read the manual
      CLOSED: [2019-01-22 Tue 17:12]
  ,*** TODO Browse the web
  ,** DONE Preparation
     DEADLINE: <2019-01-23 Wed>
     CLOSED: [2019-01-22 Tue 22:22]
  ,** Free header
  ,** TODO Lunch Bertrand
     SCHEDULED: <2019-01-24 Thu>
  ,** TODO Fix bugs with Reveal.js
     DEADLINE: <2019-01-25 Fri>
#+end_src

- =C-c C-t= cycles nothing->TODO->DONE->nothing
- Automatic set date and hour when closing (see =init.el=)
- =S-Left/Right= also works
- =C-c C-s= schedules
- =C-c C-d= assigns a deadline

*** Manipulation of dates

- Cursor inside the brackets then =S-Up/Down=
- =C-c C-c= updates the day
- Use Emacs calendar =M-x calendar=

([[https://www.gnu.org/software/emacs/manual/html_node/emacs/Calendar_002fDiary.html][C-h i g (emacs)Calendar Diary]])

*** Agenda View

#+begin_src elisp
  :bind ("\C-ca"  . org-agenda)

  ;; where to look for the agenda files
  (setq org-agenda-files (directory-files-recursively "~/org/" "\.org$"))
#+end_src

demo

(=C-c a a= or =M-x org-agenda=)

- Navigate: menu Agenda etc.
- Search: =C-a a s= and e.g. web

@simon: =v l= to setup log on.

**** Another example                                            :noexport:

#+begin_src org :tangle (prog1 "~/org/projA/wip.org" (make-directory "~/org/projA" "."))
  # -*- mode: org ; coding: utf-8 -*-
  ,#+STARTUP: content indent hideblocks
  ,#+PRIORITIES: A D D
  ,#+TAGS: @meet(M) URGENT(U)
  ,#+TAGS: sysadmin(s) infra(i) misc(m)
  ,#+TAGS: read write code

  ,* Stuff [2/4]

    - [X] Read the Dautray-Lions
    - [-] Write summary [75%]
      + [X] Tome 1
      + [X] Tome 2
      + [X] Tome 3
      + [ ] Les autres
    - [ ] Present Chapter 2 in Seminar
    - [X] Drink coffee

  ,* TODO Integral Equation [1/3]

  ,** TODO Schwab's book

  ,*** TODO Chapters [50%]                                                :read:
      - [X] Chapter 1
      - [ ] Chapter 2
      - [X] Chapter 3
      - [ ] Chapter 4

  ,*** TODO Comments [2/3]                                               :write:

  ,**** DONE Chapter 1
       CLOSED: [2019-01-18 Fri 12:43]

  This is a nice introduction.
  The theorem 12 p.14 is well explained.

  ,**** DONE Chapter 3
       CLOSED: [2019-01-17 Thu 13:24]

  Hard. Happy to finish it.
  Maybe need to read it again.

  ,**** TODO Chapter 2

  Difficult.

  ,** TODO Bertrand's idea

  ,*** DONE Discuss                                                      :@meet:
      CLOSED: [2019-01-16 Wed 18:37]

  ,*** TODO Proof-of-Concept with Julia                                   :code:

  ,**** TODO [#B] Clean the geo file
  ,**** TODO [#A] Read the mesh
  ,**** TODO [#C] Update Petsc
  ,**** TODO [#B] Implement decent Krylov

  ,*** TODO Refresh the idea                                       :@meet:write:
      SCHEDULED: <2019-01-31 Thu 18:00>

  ,*** TODO Sent the paper to Wave                                       :write:
      DEADLINE: <2019-02-01 Fri>

  ,** DONE Calderon preconditioner                             :read:write:code:
     CLOSED: [2019-01-15 Tue 15:51]
#+end_src

*** Tags / Priorities

#+begin_src org
  ,** TODO Bertrand's idea
  ,*** DONE Discuss                                                      :@meet:
      CLOSED: [2019-01-16 Wed 18:37]
  ,*** TODO Proof-of-Concept with Julia                                   :code:
  ,**** TODO [#B] Clean the geo file
  ,**** TODO [#A] Read the mesh
  ,**** TODO [#C] Update Petsc
  ,**** TODO [#B] Implement decent Krylov
  ,*** TODO Refresh the idea                                       :@meet:write:
      SCHEDULED: <2019-01-31 Thu 18:00>
  ,*** TODO Sent the paper to Wave                                       :write:
      DEADLINE: <2019-02-01 Fri>
  ,** DONE Calderon preconditioner                             :read:write:code:
     CLOSED: [2019-01-15 Tue 15:51]
#+end_src

demo

- =C-c a t= shows the tasks sorted by priorities
- =C-c a m code= shows the tasks corresponding to the tag =code=

**** Show me                                               :LIVE:noexport:
:PROPERTIES:
:CUSTOM_ID: org
:END:

- =C-c C-j= (interresting move)
- =C-c ^= (sort)

Timing clock

* Possible+Imposible = Possimpible?

http://www.hdfbcover.com/randomcovers/covers/Legen-wait-for-it-dary-stinson-quotes.jpg

or how to easily manage the table

*** M-x org-table-create

#+begin_src org :tangle "~/org/projA/table.org"
  | Student | Algebra | Analysis |
  |---------+---------+----------|
  | Alice   |    12.5 |      15. |
  | Bob     |     11. |      14. |
  | John    |     10. |      10. |
#+end_src

- =C-c |= creates with the convention line x col
- =M-S-Right= creates new col (=Left= deletes)
- =M-a/e= moves beginning/end cell
- =C-c -= or =C-c Enter= inserts horizontal line
- =M-S-Up= removes the current line
- =C-c ^= sorts the col

*** table and $\LaTeX$

- Write table with Org-mode (easy!)
- Export to =.tex= with =C-c C-e C-b l l= (body only)
- Use =\input{}=

(or epxort to buffer =C-c C-e C-b l L= and copy/paste)

#+begin_quote
DEMO!
#+end_quote

#+begin_src text :tangle (prog1 "eg/tex-org/doc.tex" (make-directory "eg/tex-org" ".")) :exports none
  \documentclass[11pt]{article}
  \usepackage[utf8]{inputenc}
  \usepackage[T1]{fontenc}

  \begin{document}


  \TeX{} is a typesetting computer program created by \emph{Donald Knuth},
  originally for his magnum opus, \textsf{The Art of Computer
    Programming}.It takes a "plain" text file and converts it into a
  high-quality document for printing or on-screen viewing.

  \LaTeX{} is a macro system built on top of \TeX{} that aims to simplify its
  use and automate many common formatting tasks. It is the de-facto
  standard for academic journals and books, and provides some of the best
  typography free software has to offer.

  \input{table1.tex}

  \emph{Leslie B. Lamport} (born February 7, 1941) is an American computer
  scientist. Lamport is best known for his seminal work in distributed
  systems and as the initial developer of the document preparation system
  \LaTeX. He was the winner of the 2013 Turing Award for imposing clear,
  well-defined coherence on the seemingly chaotic behavior of distributed
  computing systems, in which several autonomous computers communicate
  with each other by passing messages. He devised important algorithms and
  developed formal modeling and verification protocols that improve the
  quality of real distributed systems. These contributions have resulted
  in improved correctness, performance, and reliability of computer
  systems.

  \begin{table}[h]
    \input{table2.tex}
    \caption{A nice \textsc{Table}}
  \end{table}


  \end{document}
#+end_src
#+begin_src text :tangle eg/tex-org/table1.org :exports none
  ,#+begin_src text :exports none
    # Explanations not exported
    # Export this table with the sequence
    C-c C-e C-b l l
    using the Body Only option
  ,#+end_src


  |    a |    b |
  |------+------|
  |   11 |    2 |
  |  333 | 4444 |
  |    5 |  666 |
  | 7777 |   88 |
#+end_src
#+begin_src text :tangle eg/tex-org/table2.org :exports none
# -*- mode: org ; coding: utf-8 -*-


#+ATTR_LATEX: :align |c|l|
|------+------|
|    a |   bb |
|------+------|
|------+------|
|   11 |    2 |
|  333 | 4444 |
|    5 |  666 |
| 7777 |   88 |
|------+------|
#+end_src

*** makefile

# WARNING: tab is lost after C-' edit C-c C-c
# Fix: select area then M-x tabify
#+begin_src makefile :tangle eg/tex-org/Makefile
  all: doc.tex table1.tex table2.tex
	  pdflatex doc.tex

  %.tex: %.org
	   emacs -batch -q $< --eval="(org-latex-export-to-latex nil nil t t)"

  clean:
	  -rm table?.tex
	  -rm doc.{aux,log}
#+end_src

*** The spreadsheet

#+begin_src org :tangle (prog1 "eg/org/mini-spreadsheet.tex" (make-directory "eg/org" "."))
  | N | N^4 | ~Sqrt(N)~ | 1/N | Mean |
  |---+-----+-----------+-----+------|
  | 4 |     |           |     |      |
  | 3 |     |           |     |      |
  | 2 |     |           |     |      |
  | 1 |     |           |     |      |
  |   |     |           |     |      |
  ,#+TBLFM: $2=$1^4::$3=sqrt($1)::$4=1/$1::$5=vmean($2..$4)::@6$1=vmean(@2$1..@4$1)
#+end_src

*_I do not use myself_*

- =C-c ?= to get information the current cell
- =C-c }= to enter in debbuging mode

Entry point: the [[https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html][tutorial]] :-)

* Computational Document

Toward Reproducible /workflow/

#+begin_quote
"Buzzword -- What'chu talkin' 'bout, Willis?" -- Arnold
#+end_quote
- [[https://orgmode.org/worg/org-contrib/babel/uses.html#sec-6][Org-Babel]]
- [[https://hal.inria.fr/hal-01112795][An Effective Git And Org-Mode Based Workflow For Reproducible Research]]
- [[http://kieranhealy.org/files/misc/workflow-apps.pdf][Choosing your Workflow Applications]]
- [[http://kitchingroup.cheme.cmu.edu/scimax][Scimax]] by John Kitchin
- [[https://youtube.com/watch?v=1-dUkyn_fZA][Emacs + Org-mode + Python = reproducible research]] (video)

*** Org-babel

https://orgmode.org/worg/images/babel/babelfish.png

#+BEGIN_QUOTE
The Babel Fish is small, yellow, and simultaneously translates from one spoken language to another.

The Hitchhiker's Guide to the Galaxy -- Douglas Adams
#+END_QUOTE

*** Blocks

#+begin_src org
  ,#+begin_src python
    def f(x):
      return x + x
  ,#+end_src

  ,#+begin_src r
    f <- function(x) {
    x + x
    }
  ,#+end_src

  ,#+begin_src julia
    function f(x)
        x + x
    end
  ,#+end_src
#+end_src

- Options with =:tangle= or =:noweb= or =:export= etc.
- =C-c C-,= opens the menu of different blocks
- Org 9.2 =<s= or =<q= ... does not work anymore. Use Org Tempo.

*** Eval blocks

demo

- =C-c C-v t= tangles i.e. writes to files the exposed blocks
- =C-c C-v e= evals all the blocks


* Remember!

_Org-mode is_:

- Markdown on steroids
- Jupyter notebook usable outside class (troll inside :-)

#+ATTR_HTML: :width 40%
https://i.pinimg.com/originals/9f/2c/e8/9f2ce89a8d9e7db42a03041717f5e276.jpg

# #+ATTR_HTML: :width 30%
# https://upload.wikimedia.org/wikipedia/commons/thumb/a/a6/Org-mode-unicorn.svg/943px-Org-mode-unicorn.svg.png

* Start now!

https://spaceplace.nasa.gov/review/galactic-explorer/galactic_explorer.en.png

*** Key of Success

- */Master a tool needs large amount of work/*

  think all the maths you learn before complete non-trivial proofs

- */Master a tool is not easy; otherwise it is a lie/*

  think nunchaku practise to be as efficient as Bruce Lee

#+begin_quote
Why computing tools should be different ?
#+end_quote

[[http://norvig.com/21-days.html][Be good at something is long]]

* My personal conclusion

*** Why flamewar tools ? :-)

- Our daily life is interacting with computers
- We are all differently /wired/
- Cognition is not straightforward

#+begin_quote
Tools should be freedom, not constraint and pain.
#+end_quote

- Tools must help you to [[https://orgmode.org/worg/org-gtd-etc.html][get things done]]
- Org+Emacs pays off ... for me

* Happy end?

*** Be productive in procrastination :-)

http://www.phdcomics.com/comics/archive/phd010408s.gif
